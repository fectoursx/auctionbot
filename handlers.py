"""
Telegram bot handlers with inline keyboards and improved UX
"""

from uuid import UUID
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from telegram.ext import ContextTypes, ConversationHandler

from domain import Auction, AuctionStatus
from services import AuctionService
from repositories import UserRepository, AuctionRepository


class BotStates:
    """Conversation states for bot interactions"""
    REGISTER_USERNAME = 1
    CREATE_TITLE = 2
    CREATE_START_PRICE = 3
    CREATE_DURATION = 4
    CREATE_DESCRIPTION = 5
    CREATE_INITIAL_LEADER = 6
    PLACE_BID = 7
    ADMIN_ACTION = 8


class TelegramHandlers:
    """All Telegram bot handlers with inline keyboards"""
    
    def __init__(self, auction_service: AuctionService, user_repo: UserRepository, auction_repo: AuctionRepository):
        self.auction_service = auction_service
        self.user_repo = user_repo
        self.auction_repo = auction_repo
        self.bid_contexts = {}  # user_id -> auction_id for bidding

    # ============ KEYBOARD GENERATORS ============

    def get_admin_keyboard(self) -> ReplyKeyboardMarkup:
        """Generate admin keyboard"""
        keyboard = [
            [KeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å –∞—É–∫—Ü–∏–æ–Ω"), KeyboardButton("üèÅ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∞—É–∫—Ü–∏–æ–Ω")],
            [KeyboardButton("üìä –°—Ç–∞—Ç—É—Å –∞—É–∫—Ü–∏–æ–Ω–æ–≤"), KeyboardButton("üìã –û—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ –∞—É–∫—Ü–∏–æ–Ω—ã")],
            [KeyboardButton("üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"), KeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")]
        ]
        return ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=False)

    def get_user_keyboard(self) -> ReplyKeyboardMarkup:
        """Generate user keyboard"""
        keyboard = [
            [KeyboardButton("üéØ –¢–µ–∫—É—â–∏–π –∞—É–∫—Ü–∏–æ–Ω"), KeyboardButton("üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å")],
            [KeyboardButton("üìä –ò—Å—Ç–æ—Ä–∏—è"), KeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å")]
        ]
        return ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=False)

    def get_cancel_keyboard(self) -> ReplyKeyboardMarkup:
        """Generate cancel keyboard"""
        keyboard = [[KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞")]]
        return ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)

    # ============ MAIN HANDLERS ============

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle /start command - show current auction or registration"""
        user_id = update.effective_user.id
        user = await self.user_repo.get_user(user_id)
        
        if user:
            # User is registered, show appropriate interface
            if user.is_admin:
                keyboard = self.get_admin_keyboard()
                message = f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, *{user.display_name}*!\n\n–í—ã –≤–æ—à–ª–∏ –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä."
            else:
                keyboard = self.get_user_keyboard()
                message = f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, *{user.display_name}*!"
                
                # Show current auction if available
                current_auction = await self.auction_service.get_current_auction()
                if current_auction:
                    auction_message = self._format_auction_message(current_auction)
                    auction_keyboard = self._get_auction_keyboard(current_auction.auction_id, user_id in current_auction.participants)
                    
                    await update.message.reply_text(message, parse_mode='Markdown', reply_markup=keyboard)
                    await update.message.reply_text(auction_message, parse_mode='Markdown', reply_markup=auction_keyboard)
                    return
            
            await update.message.reply_text(message, parse_mode='Markdown', reply_markup=keyboard)
        else:
            # New user - show current auction with registration
            current_auction = await self.auction_service.get_current_auction()
            if current_auction:
                auction_message = self._format_auction_message(current_auction)
                keyboard = InlineKeyboardMarkup([[
                    InlineKeyboardButton("‚úÖ –£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å", callback_data=f"register_join_{current_auction.auction_id}")
                ], [
                    InlineKeyboardButton("‚ÑπÔ∏è –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å", callback_data=f"status_{current_auction.auction_id}")
                ]])
                
                await update.message.reply_text(
                    "üéØ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ê—É–∫—Ü–∏–æ–Ω-–±–æ—Ç!*\n\n"
                    "–î–ª—è —É—á–∞—Å—Ç–∏—è –≤ –∞—É–∫—Ü–∏–æ–Ω–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.",
                    parse_mode='Markdown'
                )
                await update.message.reply_text(auction_message, parse_mode='Markdown', reply_markup=keyboard)
            else:
                await update.message.reply_text(
                    "üéØ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ê—É–∫—Ü–∏–æ–Ω-–±–æ—Ç!*\n\n"
                    "–°–µ–π—á–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞—É–∫—Ü–∏–æ–Ω–æ–≤.\n"
                    "–ù–∞–∂–º–∏—Ç–µ /register –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.",
                    parse_mode='Markdown'
                )

    async def handle_text(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle text messages from keyboards"""
        text = update.message.text
        user_id = update.effective_user.id
        user = await self.user_repo.get_user(user_id)
        
        if not user:
            await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /start")
            return
        
        # Handle different button presses
        if text == "üéØ –¢–µ–∫—É—â–∏–π –∞—É–∫—Ü–∏–æ–Ω":
            await self.show_current_auction(update, context)
        elif text == "üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å":
            await self.me(update, context)
        elif text == "‚ûï –°–æ–∑–¥–∞—Ç—å –∞—É–∫—Ü–∏–æ–Ω" and user.is_admin:
            await self.create_start(update, context)
        elif text == "üèÅ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∞—É–∫—Ü–∏–æ–Ω" and user.is_admin:
            await self.end_auction(update, context)
        elif text == "üìä –°—Ç–∞—Ç—É—Å –∞—É–∫—Ü–∏–æ–Ω–æ–≤":
            await self.status(update, context)
        elif text == "üìã –û—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ –∞—É–∫—Ü–∏–æ–Ω—ã" and user.is_admin:
            await self.show_scheduled_auctions(update, context)
        elif text == "üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π" and user.is_admin:
            await self.show_users(update, context)
        elif text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å":
            await self.show_help(update, context)
        elif text == "‚ùå –û—Ç–º–µ–Ω–∞":
            await self.cancel(update, context)
        else:
            await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.")

    async def show_current_auction(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Show current active auction"""
        current_auction = await self.auction_service.get_current_auction()
        user_id = update.effective_user.id
        
        if current_auction:
            message = self._format_auction_message(current_auction)
            keyboard = self._get_auction_keyboard(current_auction.auction_id, user_id in current_auction.participants)
            await update.message.reply_text(message, reply_markup=keyboard, parse_mode='Markdown')
        else:
            # Show next scheduled auction if available
            next_auction = await self.auction_service.get_next_scheduled_auction()
            if next_auction:
                message = f"‚è≥ *–°–ª–µ–¥—É—é—â–∏–π –∞—É–∫—Ü–∏–æ–Ω:*\n\n" + self._format_auction_message(next_auction)
                await update.message.reply_text(message, parse_mode='Markdown')
            else:
                await update.message.reply_text("üì≠ –°–µ–π—á–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞—É–∫—Ü–∏–æ–Ω–æ–≤")

    async def show_scheduled_auctions(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Show scheduled auctions (admin only)"""
        scheduled_auctions = await self.auction_repo.get_scheduled_auctions()
        
        if not scheduled_auctions:
            await update.message.reply_text("üì≠ –ù–µ—Ç –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö –∞—É–∫—Ü–∏–æ–Ω–æ–≤")
            return
        
        message = "üìã *–û—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ –∞—É–∫—Ü–∏–æ–Ω—ã:*\n\n"
        for i, auction in enumerate(scheduled_auctions, 1):
            message += f"{i}. *{auction.title}*\n"
            message += f"üí∞ –°—Ç–∞—Ä—Ç–æ–≤–∞—è —Ü–µ–Ω–∞: {auction.start_price:,.0f}‚ÇΩ\n"
            if auction.time_until_start:
                message += f"‚è∞ –ù–∞—á–Ω–µ—Ç—Å—è —á–µ—Ä–µ–∑: {auction.time_until_start}\n"
            message += "\n"
        
        await update.message.reply_text(message, parse_mode='Markdown')

    async def show_users(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Show registered users count (admin only)"""
        # This would require a method to get all users from repository
        await update.message.reply_text("üë• –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")

    async def show_help(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Show help information"""
        await update.message.reply_text(
            "‚ÑπÔ∏è *–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É*\n\n"
            "üéØ *–¢–µ–∫—É—â–∏–π –∞—É–∫—Ü–∏–æ–Ω* - –ø–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –∞—É–∫—Ü–∏–æ–Ω\n"
            "üë§ *–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å* - –≤–∞—à–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
            "üìä *–ò—Å—Ç–æ—Ä–∏—è* - –≤–∞—à–∏ –ø—Ä–æ—à–ª—ã–µ —É—á–∞—Å—Ç–∏—è\n\n"
            "–î–ª—è —É—á–∞—Å—Ç–∏—è –≤ –∞—É–∫—Ü–∏–æ–Ω–µ –Ω–∞–∂–º–∏—Ç–µ '‚úÖ –£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å', "
            "–∑–∞—Ç–µ–º –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ 'üí∏ –ü–µ—Ä–µ–±–∏—Ç—å —Å—Ç–∞–≤–∫—É' –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —Å—Ç–∞–≤–æ–∫.",
            parse_mode='Markdown'
        )

    # ============ REGISTRATION HANDLERS ============

    async def register_and_join(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle registration + join auction callback"""
        query = update.callback_query
        await query.answer()
        
        auction_id = UUID(query.data.split('_')[2])
        user_id = update.effective_user.id
        
        # Store auction ID for after registration
        context.user_data['join_auction_id'] = auction_id
        
        await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–π –ª–æ–≥–∏–Ω (—Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ _):")
    async def register_username(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle username input"""
        if update.message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
            return await self.cancel(update, context)
            
        username = update.message.text.strip()
        
        if not username.replace('_', '').isalnum():
            await update.message.reply_text("‚ùå –õ–æ–≥–∏–Ω –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ _")
            return BotStates.REGISTER_USERNAME
        
        success = await self.auction_service.register_user(
            update.effective_user.id, 
            username,
            update.effective_user.username,
            update.effective_user.first_name,
            update.effective_user.last_name
        )
        
        if success:
            user = await self.user_repo.get_user(update.effective_user.id)
            if user.is_admin:
                keyboard = self.get_admin_keyboard()
                message = f"‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –í–∞—à –ª–æ–≥–∏–Ω: *{username}*\n\n–í—ã –≤–æ—à–ª–∏ –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä."
            else:
                keyboard = self.get_user_keyboard()
                message = f"‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –í–∞—à –ª–æ–≥–∏–Ω: *{username}*"
            
            await update.message.reply_text(message, parse_mode='Markdown', reply_markup=keyboard)
            
            # If joining auction after registration
            if 'join_auction_id' in context.user_data:
                auction_id = context.user_data['join_auction_id']
                await self.auction_service.join_auction(auction_id, update.effective_user.id)
                auction = await self.auction_repo.get_auction(auction_id)
                if auction:
                    auction_message = self._format_auction_message(auction)
                    auction_keyboard = self._get_auction_keyboard(auction_id, True)
                    await update.message.reply_text(auction_message, parse_mode='Markdown', reply_markup=auction_keyboard)
                del context.user_data['join_auction_id']
        else:
            await update.message.reply_text("‚ùå –≠—Ç–æ—Ç –ª–æ–≥–∏–Ω —É–∂–µ –∑–∞–Ω—è—Ç. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π:")
            return BotStates.REGISTER_USERNAME
        
        return ConversationHandler.END

    async def register_start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Start registration process"""
        user = await self.user_repo.get_user(update.effective_user.id)
        if user:
            await update.message.reply_text(f"–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ *{user.username}*", parse_mode='Markdown')
            return ConversationHandler.END
        
        await update.message.reply_text(
            "–í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–π –ª–æ–≥–∏–Ω (—Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ _):",
            reply_markup=self.get_cancel_keyboard()
        )
        return BotStates.REGISTER_USERNAME

    async def register_username(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle username input"""
        if update.message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
            return await self.cancel(update, context)
            
        username = update.message.text.strip()
        
        if not username.replace('_', '').isalnum():
            await update.message.reply_text("‚ùå –õ–æ–≥–∏–Ω –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ _")
            return BotStates.REGISTER_USERNAME
        
        success = await self.auction_service.register_user(
            update.effective_user.id, 
            username,
            update.effective_user.username,
            update.effective_user.first_name,
            update.effective_user.last_name
        )
        
        if success:
            user = await self.user_repo.get_user(update.effective_user.id)
            if user.is_admin:
                keyboard = self.get_admin_keyboard()
                message = f"‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –í–∞—à –ª–æ–≥–∏–Ω: *{username}*\n\n–í—ã –≤–æ—à–ª–∏ –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä."
            else:
                keyboard = self.get_user_keyboard()
                message = f"‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –í–∞—à –ª–æ–≥–∏–Ω: *{username}*"
            
            await update.message.reply_text(message, parse_mode='Markdown', reply_markup=keyboard)
            
            # If joining auction after registration
            if 'join_auction_id' in context.user_data:
                auction_id = context.user_data['join_auction_id']
                await self.auction_service.join_auction(auction_id, update.effective_user.id)
                auction = await self.auction_repo.get_auction(auction_id)
                if auction:
                    auction_message = self._format_auction_message(auction)
                    auction_keyboard = self._get_auction_keyboard(auction_id, True)
                    await update.message.reply_text(auction_message, parse_mode='Markdown', reply_markup=auction_keyboard)
                del context.user_data['join_auction_id']
        else:
            await update.message.reply_text("‚ùå –≠—Ç–æ—Ç –ª–æ–≥–∏–Ω —É–∂–µ –∑–∞–Ω—è—Ç. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π:")
            return BotStates.REGISTER_USERNAME
        
        return ConversationHandler.END

    async def me(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Show user profile"""
        status = await self.auction_service.get_user_status(update.effective_user.id)
        
        if not status["registered"]:
            await update.message.reply_text("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
            return
        
        user = status["user"]
        message = f"üë§ *–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å*\n\n"
        message += f"–õ–æ–≥–∏–Ω: {user.username}\n"
        message += f"–ò–º—è: {user.display_name}\n"
        message += f"–°—Ç–∞—Ç—É—Å: {'üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä' if user.is_admin else 'üë§ –£—á–∞—Å—Ç–Ω–∏–∫'}\n"
        message += f"–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {user.created_at.strftime('%d.%m.%Y %H:%M')}\n\n"
        
        if status["participating_in"]:
            message += "üìä *–£—á–∞—Å—Ç–∏–µ –≤ –∞—É–∫—Ü–∏–æ–Ω–∞—Ö:*\n"
            for participation in status["participating_in"]:
                auction = participation["auction"]
                user_bid = participation["user_bid"]
                is_leader = participation["is_leader"]
                
                message += f"\nüéØ {auction.title}\n"
                if user_bid:
                    message += f"–í–∞—à–∞ —Å—Ç–∞–≤–∫–∞: {user_bid.amount:,.0f}‚ÇΩ\n"
                    message += f"–°—Ç–∞—Ç—É—Å: {'üèÜ –õ–∏–¥–µ—Ä' if is_leader else 'üë§ –£—á–∞—Å—Ç–Ω–∏–∫'}\n"
                else:
                    message += "–°—Ç–∞–≤–æ–∫ –Ω–µ—Ç\n"
        else:
            message += "–í—ã –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ –∞—É–∫—Ü–∏–æ–Ω–∞—Ö"
        
        await update.message.reply_text(message, parse_mode='Markdown')

    async def status(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Show auction status"""
        auctions = await self.auction_repo.get_active_auctions()
        
        if not auctions:
            # Show scheduled auctions if no active ones
            scheduled = await self.auction_repo.get_scheduled_auctions()
            if scheduled:
                message = "‚è≥ *–°–ª–µ–¥—É—é—â–∏–µ –∞—É–∫—Ü–∏–æ–Ω—ã:*\n\n"
                for auction in scheduled[:3]:  # Show first 3
                    message += f"üéØ *{auction.title}*\n"
                    message += f"üí∞ –°—Ç–∞—Ä—Ç–æ–≤–∞—è —Ü–µ–Ω–∞: {auction.start_price:,.0f}‚ÇΩ\n"
                    if auction.time_until_start:
                        message += f"‚è∞ –ù–∞—á–Ω–µ—Ç—Å—è —á–µ—Ä–µ–∑: {auction.time_until_start}\n"
                    message += "\n"
            else:
                message = "üì≠ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–ª–∏ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∞—É–∫—Ü–∏–æ–Ω–æ–≤"
        else:
            message = "üìä *–ê–∫—Ç–∏–≤–Ω—ã–µ –∞—É–∫—Ü–∏–æ–Ω—ã:*\n\n"
            for auction in auctions:
                message += f"üéØ *{auction.title}*\n"
                message += f"üí∞ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {auction.current_price:,.0f}‚ÇΩ\n"
                
                leader = auction.current_leader
                if leader:
                    # Get user display name for leader
                    leader_user = await self.user_repo.get_user(leader.user_id)
                    leader_name = leader_user.display_name if leader_user else leader.username
                    message += f"üë§ –õ–∏–¥–µ—Ä: {leader_name}\n"
                elif auction.initial_leader_username:
                    message += f"üë§ –õ–∏–¥–µ—Ä: {auction.initial_leader_username}\n"
                
                message += f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(auction.participants)}\n"
                
                if auction.time_remaining:
                    message += f"‚è∞ –û—Å—Ç–∞–ª–æ—Å—å: {auction.time_remaining}\n"
                else:
                    message += "‚è∞ –ë–µ—Å—Å—Ä–æ—á–Ω—ã–π\n"
                
                message += "\n"
        
        await update.message.reply_text(message, parse_mode='Markdown')

    async def end_auction(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """End auction (admin only)"""
        user = await self.user_repo.get_user(update.effective_user.id)
        if not user or not user.is_admin:
            await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –∑–∞–≤–µ—Ä—à–∞—Ç—å –∞—É–∫—Ü–∏–æ–Ω—ã")
            return
        
        auctions = await self.auction_repo.get_active_auctions()
        if not auctions:
            await update.message.reply_text("üì≠ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∞—É–∫—Ü–∏–æ–Ω–æ–≤ –Ω–µ—Ç")
            return
        
        if len(auctions) == 1:
            success = await self.auction_service.end_auction(auctions[0].auction_id, update.effective_user.id)
            if success:
                await update.message.reply_text(f"‚úÖ –ê—É–∫—Ü–∏–æ–Ω '{auctions[0].title}' –∑–∞–≤–µ—Ä—à—ë–Ω")
            else:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∞—É–∫—Ü–∏–æ–Ω–∞")
        else:
            # Create inline keyboard for auction selection
            keyboard = []
            for auction in auctions:
                keyboard.append([InlineKeyboardButton(
                    f"üèÅ {auction.title}", 
                    callback_data=f"end_auction_{auction.auction_id}"
                )])
            keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_end")])
            
            await update.message.reply_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ –∞—É–∫—Ü–∏–æ–Ω –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è:",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )

    # ============ AUCTION CREATION HANDLERS ============

    async def create_start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Start auction creation"""
        user = await self.user_repo.get_user(update.effective_user.id)
        if not user or not user.is_admin:
            await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –∞—É–∫—Ü–∏–æ–Ω—ã")
            return ConversationHandler.END
        
        await update.message.reply_text(
            "üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–æ—Ç–∞:",
            reply_markup=self.get_cancel_keyboard()
        )
        return BotStates.CREATE_TITLE

    async def create_title(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle auction title input"""
        if update.message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
            return await self.cancel(update, context)
            
        title = update.message.text.strip()
        context.user_data['auction_title'] = title
        await update.message.reply_text(
            "üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—Ç–∞—Ä—Ç–æ–≤—É—é —Ü–µ–Ω—É (–≤ —Ä—É–±–ª—è—Ö):",
            reply_markup=self.get_cancel_keyboard()
        )
        return BotStates.CREATE_START_PRICE

    async def create_start_price(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle start price input"""
        if update.message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
            return await self.cancel(update, context)
            
        try:
            price = float(update.message.text.strip())
            if price <= 0:
                raise ValueError()
            context.user_data['start_price'] = price
            await update.message.reply_text(
                "‚è∞ –í–≤–µ–¥–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞—É–∫—Ü–∏–æ–Ω–∞ –≤ —á–∞—Å–∞—Ö (–∏–ª–∏ 0 –¥–ª—è –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ):",
                reply_markup=self.get_cancel_keyboard()
            )
            return BotStates.CREATE_DURATION
        except ValueError:
            await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É")
            return BotStates.CREATE_START_PRICE

    async def create_duration(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle duration input"""
        if update.message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
            return await self.cancel(update, context)
            
        try:
            duration = int(update.message.text.strip())
            if duration < 0:
                raise ValueError()
            context.user_data['duration'] = duration
            await update.message.reply_text(
                "üìÑ –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ª–æ—Ç–∞ (–∏–ª–∏ '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å'):",
                reply_markup=self.get_cancel_keyboard()
            )
            return BotStates.CREATE_DESCRIPTION
        except ValueError:
            await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤")
            return BotStates.CREATE_DURATION

    async def create_description(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle description input"""
        if update.message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
            return await self.cancel(update, context)
            
        description = update.message.text.strip()
        if description.lower() != '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å':
            context.user_data['description'] = description
        
        await update.message.reply_text(
            "üë§ –í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ –ª–∏–¥–µ—Ä–∞ (–∏–ª–∏ '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å'):",
            reply_markup=self.get_cancel_keyboard()
        )
        return BotStates.CREATE_INITIAL_LEADER

    async def create_initial_leader(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle initial leader input and create auction"""
        if update.message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
            return await self.cancel(update, context)
            
        initial_leader = update.message.text.strip()
        if initial_leader.lower() != '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å':
            context.user_data['initial_leader'] = initial_leader
        
        # Create auction
        auction_id = await self.auction_service.create_auction(
            creator_id=update.effective_user.id,
            title=context.user_data['auction_title'],
            start_price=context.user_data['start_price'],
            duration_hours=context.user_data['duration'],
            description=context.user_data.get('description'),
            initial_leader_username=context.user_data.get('initial_leader')
        )
        
        # Get created auction
        auction = await self.auction_repo.get_auction(auction_id)
        
        # Check if it's active or scheduled
        if auction.status == AuctionStatus.ACTIVE:
            # Send auction message to all users
            message = f"üéâ *–ù–æ–≤—ã–π –∞—É–∫—Ü–∏–æ–Ω!*\n\n" + self._format_auction_message(auction)
            keyboard = self._get_auction_keyboard(auction_id)
            
            await update.message.reply_text(
                "‚úÖ –ê—É–∫—Ü–∏–æ–Ω —Å–æ–∑–¥–∞–Ω –∏ –∑–∞–ø—É—â–µ–Ω!",
                reply_markup=self.get_admin_keyboard()
            )
            await update.message.reply_text(message, reply_markup=keyboard, parse_mode='Markdown')
        else:
            # Scheduled auction
            message = f"‚è≥ *–ê—É–∫—Ü–∏–æ–Ω –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω*\n\n" + self._format_auction_message(auction)
            await update.message.reply_text(
                "‚úÖ –ê—É–∫—Ü–∏–æ–Ω —Å–æ–∑–¥–∞–Ω –∏ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å!",
                reply_markup=self.get_admin_keyboard()
            )
            await update.message.reply_text(message, parse_mode='Markdown')
        
        return ConversationHandler.END

    # ============ BIDDING HANDLERS ============

    async def bid_start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Start bidding process"""
        query = update.callback_query
        await query.answer()
        
        auction_id = UUID(query.data.split('_')[1])
        user_id = update.effective_user.id
        
        auction = await self.auction_repo.get_auction(auction_id)
        if not auction or not auction.is_active:
            await query.edit_message_text("‚ùå –ê—É–∫—Ü–∏–æ–Ω –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω")
            return ConversationHandler.END
        
        if user_id not in auction.participants:
            await query.edit_message_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç–µ—Å—å –∫ –∞—É–∫—Ü–∏–æ–Ω—É")
            return ConversationHandler.END
        
        self.bid_contexts[user_id] = auction_id
        await query.edit_message_text(
            f"üí∏ –¢–µ–∫—É—â–∞—è —Å—Ç–∞–≤–∫–∞: *{auction.current_price:,.0f}‚ÇΩ*\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Å—Ç–∞–≤–∫—É (–±–æ–ª—å—à–µ {auction.current_price:,.0f}‚ÇΩ):",
            parse_mode='Markdown'
        )
        return BotStates.PLACE_BID

    async def place_bid(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle bid amount input"""
    async def place_bid(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle bid amount input"""
        if update.message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
            user_id = update.effective_user.id
            if user_id in self.bid_contexts:
                del self.bid_contexts[user_id]
            return await self.cancel(update, context)
            
        try:
            amount = float(update.message.text.strip())
            user_id = update.effective_user.id
            auction_id = self.bid_contexts.get(user_id)
            
            if not auction_id:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å—Ç–∞–≤–∫–∏ –ø–æ—Ç–µ—Ä—è–Ω")
                return ConversationHandler.END
            
            success = await self.auction_service.place_bid(auction_id, user_id, amount)
            if success:
                await update.message.reply_text(f"‚úÖ –°—Ç–∞–≤–∫–∞ {amount:,.0f}‚ÇΩ –ø—Ä–∏–Ω—è—Ç–∞!")
                
                # Show updated auction
                auction = await self.auction_repo.get_auction(auction_id)
                if auction:
                    message = self._format_auction_message(auction)
                    keyboard = self._get_auction_keyboard(auction_id, True)
                    await update.message.reply_text(message, reply_markup=keyboard, parse_mode='Markdown')
            else:
                auction = await self.auction_repo.get_auction(auction_id)
                await update.message.reply_text(
                    f"‚ùå –°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ {auction.current_price:,.0f}‚ÇΩ"
                )
                return BotStates.PLACE_BID
            
        except ValueError:
            await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É")
            return BotStates.PLACE_BID
        
        finally:
            if user_id in self.bid_contexts:
                del self.bid_contexts[user_id]
        
        return ConversationHandler.END

    # ============ CALLBACK HANDLERS ============

    async def join_auction(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle join auction button"""
        query = update.callback_query
        await query.answer()
        
        auction_id = UUID(query.data.split('_')[1])
        user_id = update.effective_user.id
        
        user = await self.user_repo.get_user(user_id)
        if not user:
            await query.edit_message_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /start")
            return
        
        success = await self.auction_service.join_auction(auction_id, user_id)
        if success:
            auction = await self.auction_repo.get_auction(auction_id)
            message = self._format_auction_message(auction)
            keyboard = self._get_auction_keyboard(auction_id, user_id in auction.participants)
            await query.edit_message_text(message, reply_markup=keyboard, parse_mode='Markdown')
        else:
            await query.edit_message_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∞—É–∫—Ü–∏–æ–Ω—É")

    async def show_status(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle status button"""
        query = update.callback_query
        await query.answer()
        
        auction_id = UUID(query.data.split('_')[1])
        auction = await self.auction_repo.get_auction(auction_id)
        
        if not auction:
            await query.edit_message_text("‚ùå –ê—É–∫—Ü–∏–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        message = self._format_auction_message(auction)
        keyboard = self._get_auction_keyboard(auction_id, update.effective_user.id in auction.participants)
        await query.edit_message_text(message, reply_markup=keyboard, parse_mode='Markdown')

    async def end_auction_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle end auction callback"""
        query = update.callback_query
        await query.answer()
        
        if query.data == "cancel_end":
            await query.edit_message_text("‚ùå –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∞—É–∫—Ü–∏–æ–Ω–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ")
            return
        
        auction_id = UUID(query.data.split('_')[2])
        success = await self.auction_service.end_auction(auction_id, update.effective_user.id)
        
        if success:
            auction = await self.auction_repo.get_auction(auction_id)
            await query.edit_message_text(f"‚úÖ –ê—É–∫—Ü–∏–æ–Ω '{auction.title}' –∑–∞–≤–µ—Ä—à—ë–Ω")
        else:
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∞—É–∫—Ü–∏–æ–Ω–∞")

    async def cancel(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle conversation cancellation"""
        user_id = update.effective_user.id
        user = await self.user_repo.get_user(user_id)
        
        if user:
            keyboard = self.get_admin_keyboard() if user.is_admin else self.get_user_keyboard()
            await update.message.reply_text(
                "‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞",
                reply_markup=keyboard
            )
        else:
            await update.message.reply_text(
                "‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞",
                reply_markup=ReplyKeyboardRemove()
            )
        
        # Clean up bid context if exists
        if user_id in self.bid_contexts:
            del self.bid_contexts[user_id]
            
        return ConversationHandler.END

    # ============ UTILITY METHODS ============

    def _format_auction_message(self, auction: Auction) -> str:
        """Format auction information message"""
        message = f"üéØ *{auction.title}*\n\n"
        
        if auction.description:
            message += f"üìÑ {auction.description}\n\n"
        
        message += f"üí∞ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: *{auction.current_price:,.0f}‚ÇΩ*\n"
        
        leader = auction.current_leader
        if leader:
            message += f"üë§ –õ–∏–¥–µ—Ä: {leader.username}\n"
        elif auction.initial_leader_username:
            message += f"üë§ –õ–∏–¥–µ—Ä: {auction.initial_leader_username}\n"
        
        message += f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(auction.participants)}\n"
        message += f"üìä –°—Ç–∞–≤–æ–∫: {len(auction.bids)}\n"
        
        if auction.is_scheduled:
            if auction.time_until_start:
                message += f"‚è∞ –ù–∞—á–Ω–µ—Ç—Å—è —á–µ—Ä–µ–∑: {auction.time_until_start}\n"
            else:
                message += "‚è∞ –ì–æ—Ç–æ–≤ –∫ –∑–∞–ø—É—Å–∫—É\n"
        elif auction.time_remaining:
            message += f"‚è∞ –û—Å—Ç–∞–ª–æ—Å—å: {auction.time_remaining}\n"
        else:
            message += "‚è∞ –ë–µ—Å—Å—Ä–æ—á–Ω—ã–π\n"
        
        return message

    def _get_auction_keyboard(self, auction_id: UUID, is_participant: bool = False) -> InlineKeyboardMarkup:
        """Generate auction inline keyboard"""
        keyboard = []
        
        if not is_participant:
            keyboard.append([InlineKeyboardButton("‚úÖ –£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å", callback_data=f"join_{auction_id}")])
        else:
            keyboard.append([InlineKeyboardButton("üí∏ –ü–µ—Ä–µ–±–∏—Ç—å —Å—Ç–∞–≤–∫—É", callback_data=f"bid_{auction_id}")])
        
        keyboard.append([InlineKeyboardButton("‚ÑπÔ∏è –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å", callback_data=f"status_{auction_id}")])
        
        return InlineKeyboardMarkup(keyboard)